"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = exports.Position = void 0;
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
var Position;
(function (Position) {
    Position[Position["TOP_LEFT"] = 0] = "TOP_LEFT";
    Position[Position["TOP_RIGHT"] = 1] = "TOP_RIGHT";
    Position[Position["TOP_CENTER"] = 2] = "TOP_CENTER";
    Position[Position["BOTTOM_LEFT"] = 3] = "BOTTOM_LEFT";
    Position[Position["BOTTOM_RIGHT"] = 4] = "BOTTOM_RIGHT";
    Position[Position["BOTTOM_CENTER"] = 5] = "BOTTOM_CENTER";
})(Position = exports.Position || (exports.Position = {}));
const ANIMATION_DURATION = 300;
const EASING = react_native_1.Easing.bezier(0.4, 0, 0.2, 1);
const SCREEN_INDENT = 8;
const normalizeOffset = (extraOffset) => {
    const reducer = ({ left, top }, [prop, value]) => {
        if (prop === 'left') {
            left += value;
        }
        else if (prop === 'right') {
            left -= value;
        }
        else if (prop === 'top') {
            top += value;
        }
        else if (prop === 'bottom') {
            top -= value;
        }
        return { left, top };
    };
    return Object.entries(extraOffset).reduce(reducer, { left: 0, top: 0 });
};
const getSummarizedOffset = (offsetList) => {
    const reducer = (acc, { left, top }) => ({
        left: acc.left + left,
        top: acc.top + top
    });
    return offsetList.reduce(reducer, { left: 0, top: 0 });
};
const getMenuOffset = (stickTo, component, menu) => {
    if (stickTo === Position.TOP_RIGHT) {
        const left = component.left + (component.width - menu.width);
        const top = component.top;
        return { left, top };
    }
    else if (stickTo === Position.BOTTOM_LEFT) {
        const left = component.left;
        const top = component.top + component.height;
        return { left, top };
    }
    else if (stickTo === Position.BOTTOM_RIGHT) {
        const left = component.left + (component.width - menu.width);
        const top = component.top + component.height;
        return { left, top };
    }
    else if (stickTo === Position.TOP_LEFT) {
        const left = component.left;
        const top = component.top;
        return { left, top };
    }
    else if (stickTo === Position.TOP_CENTER) {
        const left = component.left + Math.round((component.width - menu.width) / 2);
        const top = component.top;
        return { left, top };
    }
    else if (stickTo === Position.BOTTOM_CENTER) {
        const left = component.left + Math.round((component.width - menu.width) / 2);
        const top = component.top + component.height;
        return { left, top };
    }
    return { left: 0, top: 0 };
};
const getComputedOffset = (func, left, top, width, height) => {
    if (func) {
        const extraOffset = func(left, top, width, height);
        return normalizeOffset(extraOffset);
    }
    return null;
};
class Menu extends React.Component {
    constructor(props) {
        super(props);
        this.show = (componentRef, stickTo = null, extraOffset = null, computeOffset = null) => {
            if (componentRef !== null) {
                componentRef.measureInWindow((x, y, width, height) => {
                    const top = Math.max(SCREEN_INDENT, y);
                    const left = Math.max(SCREEN_INDENT, x);
                    const computedOffset = getComputedOffset(computeOffset, left, top, width, height);
                    const oldOffsets = Object.assign({}, this.state.offsets);
                    const newState = Object.assign({ menuState: 0 /* MEASURING */, component: { left, top, width, height }, offsets: Object.assign(Object.assign(Object.assign({}, oldOffsets), (extraOffset
                            ? { staticOffset: normalizeOffset(extraOffset) }
                            : {})), (computedOffset ? { computedOffset } : {})) }, (stickTo ? { stickTo } : {}));
                    this.setState(newState);
                });
            }
        };
        /* Measure new menu width and height */
        this._onMenuLayout = (event) => {
            const { width, height } = event.nativeEvent.layout;
            const { menuState, menu } = this.state;
            if (menuState === 0 /* MEASURING */) {
                this.setState({
                    menuState: 1 /* CALCULATING */,
                    menu: Object.assign(Object.assign({}, menu), { width,
                        height })
                });
            }
        };
        this._onDismiss = () => {
            if (this.props.onHidden) {
                this.props.onHidden();
            }
        };
        this.hide = () => {
            const { animation } = this.state;
            react_native_1.Animated.timing(this.state.animation.opacity, {
                toValue: 0,
                duration: ANIMATION_DURATION,
                easing: EASING,
                useNativeDriver: false
            }).start(() => {
                /* Reset state */
                this.setState({
                    menuState: 3 /* HIDDEN */,
                    animation: Object.assign(Object.assign({}, animation), { menuSize: new react_native_1.Animated.ValueXY({ x: 0, y: 0 }), opacity: new react_native_1.Animated.Value(0) })
                }, () => {
                    /* Invoke onHidden callback if defined */
                    if (react_native_1.Platform.OS !== 'ios' && this.props.onHidden) {
                        this.props.onHidden();
                    }
                });
            });
        };
        this.state = {
            menuState: 3 /* HIDDEN */,
            stickTo: Position.TOP_LEFT,
            component: {
                left: 0,
                top: 0,
                width: 0,
                height: 0
            },
            menu: {
                left: 0,
                top: 0,
                width: 0,
                height: 0
            },
            offsets: {
                staticOffset: {
                    left: 0,
                    top: 0
                },
                computedOffset: {
                    left: 0,
                    top: 0
                }
            },
            animation: {
                menuSize: new react_native_1.Animated.ValueXY({ x: 0, y: 0 }),
                opacity: new react_native_1.Animated.Value(0)
            }
        };
    }
    componentDidUpdate() {
        const { menuState, menu } = this.state;
        if (menuState === 4 /* ANIMATING */) {
            return;
        }
        if (menuState === 1 /* CALCULATING */) {
            const { stickTo, component, offsets } = this.state;
            const baseOffset = getMenuOffset(stickTo, component, menu);
            const allOffsets = [
                baseOffset,
                offsets.staticOffset,
                offsets.computedOffset
            ];
            const finalOffset = getSummarizedOffset(allOffsets);
            this.setState({
                menuState: 2 /* SHOWN */,
                menu: Object.assign(Object.assign({}, menu), { left: finalOffset.left, top: finalOffset.top })
            });
        }
        else if (menuState === 2 /* SHOWN */) {
            const { animation } = this.state;
            this.setState({
                menuState: 4 /* ANIMATING */
            }, () => {
                react_native_1.Animated.parallel([
                    react_native_1.Animated.timing(animation.menuSize, {
                        toValue: { x: menu.width, y: menu.height },
                        duration: ANIMATION_DURATION,
                        easing: EASING,
                        useNativeDriver: false
                    }),
                    react_native_1.Animated.timing(animation.opacity, {
                        toValue: 1,
                        duration: ANIMATION_DURATION,
                        easing: EASING,
                        useNativeDriver: false
                    })
                ]).start();
            });
        }
    }
    render() {
        const dimensions = react_native_1.Dimensions.get('screen');
        const { menu, component, animation } = this.state;
        const menuSize = {
            width: animation.menuSize.x,
            height: animation.menuSize.y
        };
        /* Adjust position of menu */
        const transforms = [];
        /* Flip by X axis if menu hits right screen border */
        if (menu.left > dimensions.width - menu.width - SCREEN_INDENT) {
            transforms.push({
                translateX: react_native_1.Animated.multiply(animation.menuSize.x, -1)
            });
            menu.left = Math.min(dimensions.width - SCREEN_INDENT, menu.left + component.width);
        }
        /* Flip by Y axis if menu hits bottom screen border */
        if (menu.top > dimensions.height - menu.height - SCREEN_INDENT) {
            transforms.push({
                translateY: react_native_1.Animated.multiply(animation.menuSize.y, -1)
            });
            menu.top = Math.min(dimensions.height - SCREEN_INDENT, menu.top + component.height);
        }
        const shadowMenuContainerStyle = {
            opacity: animation.opacity,
            transform: transforms,
            left: menu.left,
            top: menu.top
        };
        const { menuState } = this.state;
        const animationStarted = menuState === 4 /* ANIMATING */;
        const modalVisible = menuState === 0 /* MEASURING */ ||
            menuState === 1 /* CALCULATING */ ||
            menuState === 2 /* SHOWN */ ||
            animationStarted;
        const { testID, style, children } = this.props;
        return (<react_native_1.View collapsable={false} testID={testID}>
        <react_native_1.Modal visible={modalVisible} onRequestClose={this.hide} supportedOrientations={[
            'portrait',
            'portrait-upside-down',
            'landscape',
            'landscape-left',
            'landscape-right'
        ]} transparent onDismiss={this._onDismiss}>
          <react_native_1.TouchableWithoutFeedback onPress={this.hide}>
            <react_native_1.View style={react_native_1.StyleSheet.absoluteFill}>
              <react_native_1.Animated.View {...(!animationStarted ? { onLayout: this._onMenuLayout } : {})} style={[
            styles.shadowMenuContainer,
            shadowMenuContainerStyle,
            style
        ]}>
                <react_native_1.Animated.View style={[styles.menuContainer, animationStarted && menuSize]}>
                  {children}
                </react_native_1.Animated.View>
              </react_native_1.Animated.View>
            </react_native_1.View>
          </react_native_1.TouchableWithoutFeedback>
        </react_native_1.Modal>
      </react_native_1.View>);
    }
}
exports.Menu = Menu;
const styles = react_native_1.StyleSheet.create({
    shadowMenuContainer: Object.assign({ position: 'absolute', backgroundColor: 'white', borderRadius: 4, opacity: 0 }, react_native_1.Platform.select({
        ios: {
            shadowColor: 'black',
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.14,
            shadowRadius: 2
        },
        android: {
            elevation: 8
        }
    })),
    menuContainer: {
        overflow: 'hidden'
    }
});
//# sourceMappingURL=data:application/json;base64,